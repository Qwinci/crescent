#ifndef _BIT_H
#define _BIT_H

#include <limits>

namespace std {
	enum class endian {
		little = __ORDER_LITTLE_ENDIAN__,
		big = __ORDER_BIG_ENDIAN__,
		native = __BYTE_ORDER__
	};

	template<typename __T>
	constexpr __T byteswap(__T __value) {
		if constexpr (sizeof(__T) == 1) {
			return __value;
		}
		else if constexpr (sizeof(__T) == 2) {
			return __builtin_bswap16(__value);
		}
		else if constexpr (sizeof(__T) == 4) {
			return __builtin_bswap32(__value);
		}
		else if constexpr (sizeof(__T) == 8) {
			return __builtin_bswap64(__value);
		}
		else {
			__builtin_unreachable();
		}
	}

	template<typename __To, typename __From>
	constexpr __To bit_cast(const __From& __from) {
		return __builtin_bit_cast(__To, __from);
	}

	template<typename __T>
	constexpr __T rotl(__T __x, int __s) {
		constexpr auto __N = numeric_limits<__T>::digits;
		int __r = __s % __N;
		if (__r == 0) {
			return __x;
		}
		else if (__r > 0) {
			return __x << __r | (__x >> (__N - __r));
		}
		else {
			__r = -__r;
			return __x >> __r | __x << (__N - __r);
		}
	}

	template<typename __T>
	constexpr __T rotr(__T __x, int __s) {
		constexpr auto __N = numeric_limits<__T>::digits;
		int __r = __s % __N;
		if (__r == 0) {
			return __x;
		}
		else if (__r > 0) {
			return __x >> __r | __x << (__N - __r);
		}
		else {
			__r = -__r;
			return __x << __r | (__x >> (__N - __r));
		}
	}
}

#endif
