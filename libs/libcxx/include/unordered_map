#ifndef _UNORDERED_MAP_H
#define _UNORDERED_MAP_H

#include <optional>
#include <vector>
#include <utility>
#include <bits/cxx_hash_bits.hpp>

namespace std {
	template<typename __Key, typename __T, typename __Hash = hash<__Key>>
	class unordered_map {
	public:
		using key_type = __Key;
		using mapped_type = __T;
		using value_type = pair<__Key, __T>;
		using size_type = size_t;
		using difference_type = ptrdiff_t;
		using hasher = __Hash;
		using reference = value_type&;
		using const_reference = const value_type&;
		using iterator = value_type*;
		using const_iterator = const value_type*;

		void insert(const value_type& __value) {
			auto __hash = __Hash {}(__value.first);

			if (__table.empty()) {
				__table.resize(8);
				__table[__hash % 8] = __value;
				++__used;
				return;
			}

			auto __load_factor = __used * 100 / __table.size();
			if (__load_factor >= 70) {
				vector<value_type> __new_table;
				auto __new_table_size = __table.size() * 2;
				__new_table.resize(__new_table_size);

				for (auto& __slot : __table) {
					if (!__slot.has_value()) {
						continue;
					}

					auto __slot_hash = __Hash {}(__slot.value().first);

					size_t __bucket_index = __slot_hash % __new_table_size;
					while (true) {
						auto& __bucket = __new_table[__bucket_index];
						if (!__bucket.has_value()) {
							__bucket = move(__slot.value());
							break;
						}
						__bucket_index = (__bucket_index + 1) % __new_table_size;
					}
				}

				__table = move(__new_table);
			}

			size_t __table_size = __table.size();
			size_t __bucket_index = __hash % __table_size;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (!__bucket.has_value() || __bucket->key == __value.first) {
					if (!__bucket.has_value()) {
						++__used;
					}
					__bucket = __value;
					return;
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
			}
		}

		void insert(value_type&& __value) {
			auto __hash = __Hash {}(__value.first);

			if (__table.empty()) {
				__table.resize(8);
				__table[__hash % 8] = move(__value);
				++__used;
				return;
			}

			auto __load_factor = __used * 100 / __table.size();
			if (__load_factor >= 70) {
				vector<optional<value_type>> __new_table;
				auto __new_table_size = __table.size() * 2;
				__new_table.resize(__new_table_size);

				for (auto& __slot : __table) {
					if (!__slot.has_value()) {
						continue;
					}

					auto __slot_hash = __Hash {}(__slot.value().first);

					size_t __bucket_index = __slot_hash % __new_table_size;
					while (true) {
						auto& __bucket = __new_table[__bucket_index];
						if (!__bucket.has_value()) {
							__bucket = move(__slot.value());
							break;
						}
						__bucket_index = (__bucket_index + 1) % __new_table_size;
					}
				}

				__table = move(__new_table);
			}

			size_t __table_size = __table.size();
			size_t __bucket_index = __hash % __table_size;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (!__bucket.has_value() || __bucket->first == __value.first) {
					if (!__bucket.has_value()) {
						++__used;
					}
					__bucket = move(__value);
					return;
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
			}
		}

		void erase(const __Key& __key) {
			auto __table_size = __table.size();
			if (!__table_size) {
				return;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					__bucket.reset();
					return;
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return;
				}
			}
		}

		template<typename __K>
		void erase(__K&& __key) {
			auto __table_size = __table.size();
			if (!__table_size) {
				return;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					__bucket.reset();
					return;
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return;
				}
			}
		}

		[[nodiscard]] iterator find(const __Key& __key) {
			size_t __table_size = __table.size();
			if (!__table_size) {
				return nullptr;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					return &__bucket.value();
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return nullptr;
				}
			}
		}

		[[nodiscard]] const_iterator find(const __Key& __key) const {
			size_t __table_size = __table.size();
			if (!__table_size) {
				return nullptr;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					return &__bucket.value();
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return nullptr;
				}
			}
		}

		template<typename __K>
		[[nodiscard]] iterator find(const __K& __key) {
			size_t __table_size = __table.size();
			if (!__table_size) {
				return nullptr;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					return &__bucket.value();
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return nullptr;
				}
			}
		}

		template<typename __K>
		[[nodiscard]] const_iterator find(const __K& __key) const {
			size_t __table_size = __table.size();
			if (!__table_size) {
				return nullptr;
			}

			auto __hash = __Hash {}(__key);

			size_t __bucket_index = __hash % __table_size;
			size_t __start = __bucket_index;
			while (true) {
				auto& __bucket = __table[__bucket_index];
				if (__bucket && __bucket.value().first == __key) {
					return &__bucket.value();
				}
				__bucket_index = (__bucket_index + 1) % __table_size;
				if (__bucket_index == __start) {
					return nullptr;
				}
			}
		}

		void clear() {
			__table.clear();
			__used = 0;
		}

		constexpr iterator end() {
			return nullptr;
		}

		constexpr const_iterator end() const {
			return nullptr;
		}

	private:
		vector<optional<value_type>> __table;
		size_t __used {};
	};
}

#endif
